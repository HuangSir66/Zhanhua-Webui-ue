{"ast":null,"code":"let faceInputElement = null;\nlet bodyInputElement = null;\nexport default {\n  data() {\n    return {\n      faceImageUrl: \"\",\n      // 人脸图像 URL\n      bodyTemplateUrl: \"\",\n      // 身体模版 URL\n      generatedImage: \"\" // 生成的图片 URL\n    };\n  },\n  methods: {\n    // 上传人脸图像\n    toGetFaceImg() {\n      if (!faceInputElement) {\n        faceInputElement = this.createInputElement(this.uploadFaceImage);\n      }\n      faceInputElement.click();\n    },\n    // 上传身体模版\n    toGetBodyTemplate() {\n      if (!bodyInputElement) {\n        bodyInputElement = this.createInputElement(this.uploadBodyTemplate);\n      }\n      bodyInputElement.click();\n    },\n    // 创建通用的文件上传控件\n    createInputElement(callback) {\n      const input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"file\");\n      input.style.display = \"none\";\n      input.addEventListener(\"change\", callback, false);\n      document.body.appendChild(input);\n      return input;\n    },\n    // 上传人脸图像的处理逻辑\n    uploadFaceImage(event) {\n      this.handleFileUpload(event, url => {\n        this.faceImageUrl = url;\n      });\n    },\n    // 上传身体模版的处理逻辑\n    uploadBodyTemplate(event) {\n      this.handleFileUpload(event, url => {\n        this.bodyTemplateUrl = url;\n      });\n    },\n    // 通用文件上传逻辑\n    handleFileUpload(event, callback) {\n      const file = event.target.files[0];\n      if (!file) return;\n      const isImage = file.type.indexOf(\"image\") !== -1;\n      const isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isImage) {\n        this.$message.error(\"请选择图片文件\");\n        return;\n      }\n      if (!isLt2M) {\n        this.$message.error(\"上传图片大小不能超过 2MB\");\n        return;\n      }\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function () {\n        callback(this.result);\n      };\n    }\n  },\n  beforeDestroy() {\n    // 清理事件监听和 DOM 元素\n    if (faceInputElement) {\n      faceInputElement.removeEventListener(\"change\", this.uploadFaceImage);\n      document.body.removeChild(faceInputElement);\n      faceInputElement = null;\n    }\n    if (bodyInputElement) {\n      bodyInputElement.removeEventListener(\"change\", this.uploadBodyTemplate);\n      document.body.removeChild(bodyInputElement);\n      bodyInputElement = null;\n    }\n  }\n};","map":{"version":3,"names":["faceInputElement","bodyInputElement","data","faceImageUrl","bodyTemplateUrl","generatedImage","methods","toGetFaceImg","createInputElement","uploadFaceImage","click","toGetBodyTemplate","uploadBodyTemplate","callback","input","document","createElement","setAttribute","style","display","addEventListener","body","appendChild","event","handleFileUpload","url","file","target","files","isImage","type","indexOf","isLt2M","size","$message","error","reader","FileReader","readAsDataURL","onload","result","beforeDestroy","removeEventListener","removeChild"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 左半边 -->\n    <div>\n      <!-- 人脸图像上传 -->\n      <div @click=\"toGetFaceImg\">\n        <img :src=\"faceImageUrl\" v-if=\"faceImageUrl\" alt=\"人脸图像\" />\n        <p v-else>点击上传人脸图像</p>\n      </div>\n      <!-- 身体模版上传 -->\n      <div @click=\"toGetBodyTemplate\">\n        <img :src=\"bodyTemplateUrl\" v-if=\"bodyTemplateUrl\" alt=\"身体模版\" />\n        <p v-else>点击上传身体模版</p>\n      </div>\n    </div>\n    <!-- 右半边 -->\n    <div>\n      <div>\n        <img :src=\"generatedImage\" v-if=\"generatedImage\" alt=\"生成的图片\" />\n        <p v-else>点击生成后显示图片</p>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nlet faceInputElement = null;\nlet bodyInputElement = null;\n\nexport default {\n  data() {\n    return {\n      faceImageUrl: \"\", // 人脸图像 URL\n      bodyTemplateUrl: \"\", // 身体模版 URL\n      generatedImage: \"\", // 生成的图片 URL\n    };\n  },\n  methods: {\n    // 上传人脸图像\n    toGetFaceImg() {\n      if (!faceInputElement) {\n        faceInputElement = this.createInputElement(this.uploadFaceImage);\n      }\n      faceInputElement.click();\n    },\n    // 上传身体模版\n    toGetBodyTemplate() {\n      if (!bodyInputElement) {\n        bodyInputElement = this.createInputElement(this.uploadBodyTemplate);\n      }\n      bodyInputElement.click();\n    },\n    // 创建通用的文件上传控件\n    createInputElement(callback) {\n      const input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"file\");\n      input.style.display = \"none\";\n      input.addEventListener(\"change\", callback, false);\n      document.body.appendChild(input);\n      return input;\n    },\n    // 上传人脸图像的处理逻辑\n    uploadFaceImage(event) {\n      this.handleFileUpload(event, (url) => {\n        this.faceImageUrl = url;\n      });\n    },\n    // 上传身体模版的处理逻辑\n    uploadBodyTemplate(event) {\n      this.handleFileUpload(event, (url) => {\n        this.bodyTemplateUrl = url;\n      });\n    },\n    // 通用文件上传逻辑\n    handleFileUpload(event, callback) {\n      const file = event.target.files[0];\n      if (!file) return;\n      const isImage = file.type.indexOf(\"image\") !== -1;\n      const isLt2M = file.size / 1024 / 1024 < 2;\n      if (!isImage) {\n        this.$message.error(\"请选择图片文件\");\n        return;\n      }\n      if (!isLt2M) {\n        this.$message.error(\"上传图片大小不能超过 2MB\");\n        return;\n      }\n      const reader = new FileReader();\n      reader.readAsDataURL(file);\n      reader.onload = function () {\n        callback(this.result);\n      };\n    },\n  },\n  beforeDestroy() {\n    // 清理事件监听和 DOM 元素\n    if (faceInputElement) {\n      faceInputElement.removeEventListener(\"change\", this.uploadFaceImage);\n      document.body.removeChild(faceInputElement);\n      faceInputElement = null;\n    }\n    if (bodyInputElement) {\n      bodyInputElement.removeEventListener(\"change\", this.uploadBodyTemplate);\n      document.body.removeChild(bodyInputElement);\n      bodyInputElement = null;\n    }\n  },\n};\n</script>\n\n<style>\n/* 样式部分根据需求调整，此处不设置复杂样式 */\ndiv {\n  margin: 10px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  text-align: center;\n  cursor: pointer;\n}\nimg {\n  max-width: 100%;\n  height: auto;\n  display: block;\n  margin: 0 auto;\n}\n</style>\n"],"mappings":"AA0BA,IAAAA,gBAAA;AACA,IAAAC,gBAAA;AAEA;EACAC,KAAA;IACA;MACAC,YAAA;MAAA;MACAC,eAAA;MAAA;MACAC,cAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,aAAA;MACA,KAAAP,gBAAA;QACAA,gBAAA,QAAAQ,kBAAA,MAAAC,eAAA;MACA;MACAT,gBAAA,CAAAU,KAAA;IACA;IACA;IACAC,kBAAA;MACA,KAAAV,gBAAA;QACAA,gBAAA,QAAAO,kBAAA,MAAAI,kBAAA;MACA;MACAX,gBAAA,CAAAS,KAAA;IACA;IACA;IACAF,mBAAAK,QAAA;MACA,MAAAC,KAAA,GAAAC,QAAA,CAAAC,aAAA;MACAF,KAAA,CAAAG,YAAA;MACAH,KAAA,CAAAI,KAAA,CAAAC,OAAA;MACAL,KAAA,CAAAM,gBAAA,WAAAP,QAAA;MACAE,QAAA,CAAAM,IAAA,CAAAC,WAAA,CAAAR,KAAA;MACA,OAAAA,KAAA;IACA;IACA;IACAL,gBAAAc,KAAA;MACA,KAAAC,gBAAA,CAAAD,KAAA,EAAAE,GAAA;QACA,KAAAtB,YAAA,GAAAsB,GAAA;MACA;IACA;IACA;IACAb,mBAAAW,KAAA;MACA,KAAAC,gBAAA,CAAAD,KAAA,EAAAE,GAAA;QACA,KAAArB,eAAA,GAAAqB,GAAA;MACA;IACA;IACA;IACAD,iBAAAD,KAAA,EAAAV,QAAA;MACA,MAAAa,IAAA,GAAAH,KAAA,CAAAI,MAAA,CAAAC,KAAA;MACA,KAAAF,IAAA;MACA,MAAAG,OAAA,GAAAH,IAAA,CAAAI,IAAA,CAAAC,OAAA;MACA,MAAAC,MAAA,GAAAN,IAAA,CAAAO,IAAA;MACA,KAAAJ,OAAA;QACA,KAAAK,QAAA,CAAAC,KAAA;QACA;MACA;MACA,KAAAH,MAAA;QACA,KAAAE,QAAA,CAAAC,KAAA;QACA;MACA;MACA,MAAAC,MAAA,OAAAC,UAAA;MACAD,MAAA,CAAAE,aAAA,CAAAZ,IAAA;MACAU,MAAA,CAAAG,MAAA;QACA1B,QAAA,MAAA2B,MAAA;MACA;IACA;EACA;EACAC,cAAA;IACA;IACA,IAAAzC,gBAAA;MACAA,gBAAA,CAAA0C,mBAAA,gBAAAjC,eAAA;MACAM,QAAA,CAAAM,IAAA,CAAAsB,WAAA,CAAA3C,gBAAA;MACAA,gBAAA;IACA;IACA,IAAAC,gBAAA;MACAA,gBAAA,CAAAyC,mBAAA,gBAAA9B,kBAAA;MACAG,QAAA,CAAAM,IAAA,CAAAsB,WAAA,CAAA1C,gBAAA;MACAA,gBAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}