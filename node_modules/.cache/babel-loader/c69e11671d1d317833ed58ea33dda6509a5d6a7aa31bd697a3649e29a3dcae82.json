{"ast":null,"code":"import QRCode from \"qrcode\";\nexport default {\n  data() {\n    return {\n      images: [{\n        src: require(\"@/assets/background.jpg\")\n      }, {\n        src: require(\"@/assets/beijing1.png\")\n      }, {\n        src: require(\"@/assets/beijing1.png\")\n      }, {\n        src: require(\"@/assets/beijing1.png\")\n      }, {\n        src: require(\"@/assets/beijing1.png\")\n      }],\n      url: \"https://space.bilibili.com/452543325/upload/video\",\n      // 这个是输入框的值\n      qrCode: \"\",\n      // 这个是二维码图片的url\n      scrollSpeed: 0.5,\n      // 控制滚动的速度\n      isHovered: null,\n      // 当前悬停的图片索引\n      clearTimer: null // 用来存储清除二维码的定时器\n    };\n  },\n  methods: {\n    generateQRCode(event) {\n      // 生成二维码逻辑(参数指定url文字即可)\n      QRCode.toDataURL(this.url).then(async qr => {\n        this.qrCode = qr; // 设置二维码图片\n\n        // 每次生成二维码时，启动一个新的计时器，5秒后清除二维码\n        this.startClearTimer();\n      }).catch(error => {\n        console.error(\"生成二维码出错：\", error);\n      });\n\n      // 阻止点击二维码按钮时事件传播，防止触发页面上的点击事件\n      event.stopPropagation();\n    },\n    // 启动清除二维码的定时器\n    startClearTimer() {\n      // 如果已有定时器，清除它\n      if (this.clearTimer) {\n        clearTimeout(this.clearTimer);\n      }\n\n      // 设置一个 5 秒后清除二维码的定时器\n      this.clearTimer = setTimeout(() => {\n        this.qrCode = \"\"; // 清除二维码\n      }, 10000); // 5秒后清除二维码\n    },\n    // 监听页面点击事件，点击时重置定时器\n    handleClick(event) {\n      // 判断点击的区域是否是二维码区域，如果是就不清除二维码，否则清除\n      const qrCodeElement = this.$el.querySelector('.win-erweima');\n\n      // 判断点击是否在二维码外\n      if (qrCodeElement && !qrCodeElement.contains(event.target)) {\n        this.qrCode = \"\"; // 清除二维码\n      }\n\n      // 每次点击时，重置计时器，防止自动清除二维码\n      this.startClearTimer();\n    },\n    onMouseOver(index) {\n      this.isHovered = index; // 设置当前悬停的图片索引\n    },\n    onMouseOut() {\n      this.isHovered = null; // 重置悬停状态，恢复滚动\n    }\n  },\n  mounted() {\n    this.startScrolling(); // 启动滚动\n  },\n  methods: {\n    // 平滑滚动的函数\n    startScrolling() {\n      const scrollContainer = this.$refs.scrollContainer;\n      const containerWidth = scrollContainer.offsetWidth; // 获取容器的宽度\n      const totalWidth = scrollContainer.scrollWidth; // 获取所有图片的总宽度\n\n      // 设置动画，创建无限滚动效果\n      scrollContainer.style.animation = `scrolling ${totalWidth / this.scrollSpeed}s linear infinite`;\n    }\n  }\n};","map":{"version":3,"names":["QRCode","data","images","src","require","url","qrCode","scrollSpeed","isHovered","clearTimer","methods","generateQRCode","event","toDataURL","then","qr","startClearTimer","catch","error","console","stopPropagation","clearTimeout","setTimeout","handleClick","qrCodeElement","$el","querySelector","contains","target","onMouseOver","index","onMouseOut","mounted","startScrolling","scrollContainer","$refs","containerWidth","offsetWidth","totalWidth","scrollWidth","style","animation"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"clothing\" id=\"clothing-v\" @click=\"handleClick\">\n    <div class=\"overlay\" v-if=\"qrCode\"></div>\n    <div v-if=\"qrCode\" class=\"win-erweima\">\n      <img :src=\"qrCode\" style=\"width: 500px;height: 500px;border: 1px #CCCCCC solid;\" alt=\"QR Code\" />\n    </div>\n    <div class=\"win-up\" style=\"z-index: 1\">\n      <div class=\"win-show\">\n        <img class=\"win-photo\" src=\"@/assets/show.jpg\" />\n      </div>\n      <div class=\"all-button\">\n        <img class=\"win-button\" src=\"@/assets/shangchuan.png\" />\n        <img class=\"win-button\" src=\"@/assets/build.png\" />\n        <img class=\"win-button\" src=\"@/assets/erweima.png\" @click=\"generateQRCode\" />\n      </div>\n    </div>\n\n    <div class=\"win-down\">\n      <div class=\"gundong\">\n        <div class=\"topgun\">\n          <div ref=\"scrollContainer\" class=\"scroll-container\">\n            <!-- 图片会根据数组的顺序自动滚动 -->\n            <div\n                class=\"smallbox\"\n                v-for=\"(item, index) in images\"\n                :key=\"index\"\n                @mouseover=\"onMouseOver(index)\"\n                @mouseout=\"onMouseOut\"\n                :class=\"{ highlighted: isHovered === index }\"\n            >\n              <img :src=\"item.src\" class=\"slide-image\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport QRCode from \"qrcode\";\n\nexport default {\n  data() {\n    return {\n      images: [\n        { src: require(\"@/assets/background.jpg\") },\n        { src: require(\"@/assets/beijing1.png\") },\n        { src: require(\"@/assets/beijing1.png\") },\n        { src: require(\"@/assets/beijing1.png\") },\n        { src: require(\"@/assets/beijing1.png\") },\n      ],\n      url: \"https://space.bilibili.com/452543325/upload/video\", // 这个是输入框的值\n      qrCode: \"\", // 这个是二维码图片的url\n      scrollSpeed: 0.5, // 控制滚动的速度\n      isHovered: null, // 当前悬停的图片索引\n      clearTimer: null, // 用来存储清除二维码的定时器\n    };\n  },\n  methods: {\n    generateQRCode(event) {\n      // 生成二维码逻辑(参数指定url文字即可)\n      QRCode.toDataURL(this.url)\n          .then(async (qr) => {\n            this.qrCode = qr; // 设置二维码图片\n\n            // 每次生成二维码时，启动一个新的计时器，5秒后清除二维码\n            this.startClearTimer();\n          })\n          .catch((error) => {\n            console.error(\"生成二维码出错：\", error);\n          });\n\n      // 阻止点击二维码按钮时事件传播，防止触发页面上的点击事件\n      event.stopPropagation();\n    },\n\n    // 启动清除二维码的定时器\n    startClearTimer() {\n      // 如果已有定时器，清除它\n      if (this.clearTimer) {\n        clearTimeout(this.clearTimer);\n      }\n\n      // 设置一个 5 秒后清除二维码的定时器\n      this.clearTimer = setTimeout(() => {\n        this.qrCode = \"\"; // 清除二维码\n      }, 10000); // 5秒后清除二维码\n    },\n\n    // 监听页面点击事件，点击时重置定时器\n    handleClick(event) {\n      // 判断点击的区域是否是二维码区域，如果是就不清除二维码，否则清除\n      const qrCodeElement = this.$el.querySelector('.win-erweima');\n\n      // 判断点击是否在二维码外\n      if (qrCodeElement && !qrCodeElement.contains(event.target)) {\n        this.qrCode = \"\"; // 清除二维码\n      }\n\n      // 每次点击时，重置计时器，防止自动清除二维码\n      this.startClearTimer();\n    },\n\n    onMouseOver(index) {\n      this.isHovered = index; // 设置当前悬停的图片索引\n    },\n    onMouseOut() {\n      this.isHovered = null; // 重置悬停状态，恢复滚动\n    },\n  },\n  mounted() {\n    this.startScrolling(); // 启动滚动\n  },\n  methods: {\n    // 平滑滚动的函数\n    startScrolling() {\n      const scrollContainer = this.$refs.scrollContainer;\n      const containerWidth = scrollContainer.offsetWidth;  // 获取容器的宽度\n      const totalWidth = scrollContainer.scrollWidth;     // 获取所有图片的总宽度\n\n      // 设置动画，创建无限滚动效果\n      scrollContainer.style.animation = `scrolling ${totalWidth / this.scrollSpeed}s linear infinite`;\n    },\n  },\n};\n</script>\n\n<style scoped>\n/* 外层容器样式 */\n.clothing {\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-start;\n  align-items: flex-start;\n}\n\n/* 滚动区域样式 */\n.scroll-container {\n  display: flex;\n  transition: transform 0.2s ease-out;\n  will-change: transform;\n  white-space: nowrap;\n  overflow: hidden;\n}\n\n/* 每一张小图片 */\n.smallbox {\n  display: inline-block;\n  margin-right: 1vh;\n}\n\nimg.slide-image {\n  width: 100%;\n  height: 80%;\n}\n\n/* CSS 动画，平滑滚动容器 */\n@keyframes scrolling {\n  from {\n    transform: translateX(0);\n  }\n  to {\n    transform: translateX(-100%);\n  }\n}\n</style>\n"],"mappings":"AAwCA,OAAAA,MAAA;AAEA;EACAC,KAAA;IACA;MACAC,MAAA,GACA;QAAAC,GAAA,EAAAC,OAAA;MAAA,GACA;QAAAD,GAAA,EAAAC,OAAA;MAAA,GACA;QAAAD,GAAA,EAAAC,OAAA;MAAA,GACA;QAAAD,GAAA,EAAAC,OAAA;MAAA,GACA;QAAAD,GAAA,EAAAC,OAAA;MAAA,EACA;MACAC,GAAA;MAAA;MACAC,MAAA;MAAA;MACAC,WAAA;MAAA;MACAC,SAAA;MAAA;MACAC,UAAA;IACA;EACA;EACAC,OAAA;IACAC,eAAAC,KAAA;MACA;MACAZ,MAAA,CAAAa,SAAA,MAAAR,GAAA,EACAS,IAAA,OAAAC,EAAA;QACA,KAAAT,MAAA,GAAAS,EAAA;;QAEA;QACA,KAAAC,eAAA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,aAAAA,KAAA;MACA;;MAEA;MACAN,KAAA,CAAAQ,eAAA;IACA;IAEA;IACAJ,gBAAA;MACA;MACA,SAAAP,UAAA;QACAY,YAAA,MAAAZ,UAAA;MACA;;MAEA;MACA,KAAAA,UAAA,GAAAa,UAAA;QACA,KAAAhB,MAAA;MACA;IACA;IAEA;IACAiB,YAAAX,KAAA;MACA;MACA,MAAAY,aAAA,QAAAC,GAAA,CAAAC,aAAA;;MAEA;MACA,IAAAF,aAAA,KAAAA,aAAA,CAAAG,QAAA,CAAAf,KAAA,CAAAgB,MAAA;QACA,KAAAtB,MAAA;MACA;;MAEA;MACA,KAAAU,eAAA;IACA;IAEAa,YAAAC,KAAA;MACA,KAAAtB,SAAA,GAAAsB,KAAA;IACA;IACAC,WAAA;MACA,KAAAvB,SAAA;IACA;EACA;EACAwB,QAAA;IACA,KAAAC,cAAA;EACA;EACAvB,OAAA;IACA;IACAuB,eAAA;MACA,MAAAC,eAAA,QAAAC,KAAA,CAAAD,eAAA;MACA,MAAAE,cAAA,GAAAF,eAAA,CAAAG,WAAA;MACA,MAAAC,UAAA,GAAAJ,eAAA,CAAAK,WAAA;;MAEA;MACAL,eAAA,CAAAM,KAAA,CAAAC,SAAA,gBAAAH,UAAA,QAAA/B,WAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}