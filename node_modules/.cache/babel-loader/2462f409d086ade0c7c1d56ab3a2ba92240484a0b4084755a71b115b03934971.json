{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport QRCode from \"qrcode\";\nlet inputElement = null;\nexport default {\n  data() {\n    return {\n      images: [{\n        src: require(\"@/assets/background.jpg\")\n      }, {\n        src: require(\"@/assets/beijing1.png\")\n      }, {\n        src: require(\"@/assets/beijing1.png\")\n      }, {\n        src: require(\"@/assets/beijing1.png\")\n      }, {\n        src: require(\"@/assets/beijing1.png\")\n      }],\n      url: \"https://space.bilibili.com/452543325/upload/video\",\n      // 这个是输入框的值\n      qrCode: \"\",\n      // 这个是二维码图片的url\n      scrollSpeed: 0.5,\n      // 控制滚动的速度\n      scrollPosition: 0,\n      // 当前滚动位置\n      isHovered: null,\n      // 当前悬停的图片索引\n      clearTimer: null // 用来存储清除二维码的定时器\n    };\n  },\n  methods: {\n    generateQRCode(event) {\n      // 生成二维码逻辑(参数指定url文字即可)\n      QRCode.toDataURL(this.url).then(async qr => {\n        this.qrCode = qr; // 设置二维码图片\n\n        // 每次生成二维码时，启动一个新的计时器，5秒后清除二维码\n        this.startClearTimer();\n      }).catch(error => {\n        console.error(\"生成二维码出错：\", error);\n      });\n\n      // 阻止点击二维码按钮时事件传播，防止触发页面上的点击事件\n      event.stopPropagation();\n    },\n    // 启动清除二维码的定时器\n    startClearTimer() {\n      // 如果已有定时器，清除它\n      if (this.clearTimer) {\n        clearTimeout(this.clearTimer);\n      }\n\n      // 设置一个 5 秒后清除二维码的定时器\n      this.clearTimer = setTimeout(() => {\n        this.qrCode = \"\"; // 清除二维码\n      }, 10000); // 5秒后清除二维码\n    },\n    // 监听页面点击事件，点击时重置定时器\n    handleClick(event) {\n      // 判断点击的区域是否是二维码区域，如果是就不清除二维码，否则清除\n      const qrCodeElement = this.$el.querySelector('.win-erweima');\n\n      // 判断点击是否在二维码外\n      if (qrCodeElement && !qrCodeElement.contains(event.target)) {\n        this.qrCode = \"\"; // 清除二维码\n      }\n\n      // 每次点击时，重置计时器，防止自动清除二维码\n      this.startClearTimer();\n    },\n    smoothScroll() {\n      const scrollContainer = this.$refs.scrollContainer;\n      const imageWidth = scrollContainer.children[0].offsetWidth; // 每张图片的宽度\n\n      const animate = () => {\n        if (this.isHovered === null) {\n          this.scrollPosition -= this.scrollSpeed; // 每次更新滚动位置\n\n          // 当第一张图片完全滚出容器时，调整第一张图片到最后\n          if (this.scrollPosition <= -imageWidth) {\n            // 将滚动位置恢复到起始点位置，保持平滑过渡\n            this.scrollPosition += imageWidth;\n\n            // 将第一张图片移到最后，而不影响其他图片\n            const firstImage = this.images.shift(); // 移除第一张图片\n            this.images.push(firstImage); // 将其添加到最后\n\n            // 直接修改 scrollContainer 的 translateX 来维持平滑滚动\n            scrollContainer.style.transition = 'none'; // 禁止过渡动画\n            scrollContainer.style.transform = `translateX(${this.scrollPosition}px)`; // 直接设置新的滚动位置\n\n            // 为了避免“跳跃”，让滚动容器重新触发平滑过渡\n            setTimeout(() => {\n              scrollContainer.style.transition = 'transform 0.2s ease-out'; // 恢复过渡效果\n            }, 0); // 确保修改生效后立刻恢复过渡动画\n          }\n\n          // 更新滚动位置\n          scrollContainer.style.transform = `translateX(${this.scrollPosition}px)`;\n        }\n\n        // 继续请求下一帧，保持滚动\n        requestAnimationFrame(animate);\n      };\n\n      // 启动动画\n      requestAnimationFrame(animate);\n    },\n    onMouseOver(index) {\n      this.isHovered = index; // 设置当前悬停的图片索引\n    },\n    onMouseOut() {\n      this.isHovered = null; // 重置悬停状态，恢复滚动\n    }\n  },\n  mounted() {\n    this.smoothScroll();\n  }\n};","map":{"version":3,"names":["QRCode","inputElement","data","images","src","require","url","qrCode","scrollSpeed","scrollPosition","isHovered","clearTimer","methods","generateQRCode","event","toDataURL","then","qr","startClearTimer","catch","error","console","stopPropagation","clearTimeout","setTimeout","handleClick","qrCodeElement","$el","querySelector","contains","target","smoothScroll","scrollContainer","$refs","imageWidth","children","offsetWidth","animate","firstImage","shift","push","style","transition","transform","requestAnimationFrame","onMouseOver","index","onMouseOut","mounted"],"sources":["src/views/HomeView.vue"],"sourcesContent":["<template>\n  <div class=\"clothing\" id=\"clothing-v\" @click=\"handleClick\">\n    <div class=\"overlay\" v-if=\"qrCode\"></div>\n    <div v-if=\"qrCode\" class=\"win-erweima\">\n      <img :src=\"qrCode\" style=\"width: 500px;height: 500px;border: 1px #CCCCCC solid;\" alt=\"QR Code\" />\n    </div>\n    <div class=\"win-up\" style=\"z-index: 1\">\n      <div class=\"win-show\">\n        <img\n            class=\"win-photo\"\n            src=\"@/assets/show.jpg\"\n        >\n      </div>\n      <div class=\"all-button\">\n        <img\n            class=\"win-button\"\n            src=\"@/assets/shangchuan.png\"\n        ><img\n          class=\"win-button\"\n          src=\"@/assets/build.png\"\n      ><img\n          class=\"win-button\"\n          src=\"@/assets/erweima.png\"\n          @click=\"generateQRCode\"\n      >\n      </div>\n    </div>\n    <div class=\"win-down\">\n      <img src=\"@/assets/preImg.png\" class=\"control-img pre-img\">\n      <img src=\"@/assets/nexImg.png\" class=\"control-img nex-img\">\n      <div class=\"gundong\">\n        <div class=\"topgun\">\n          <div ref=\"scrollContainer\" class=\"scroll-container\">\n            <!-- 初始图片 -->\n            <div\n                class=\"smallbox\"\n                v-for=\"(item, index) in images\"\n                :key=\"index\"\n                @mouseover=\"onMouseOver(index)\"\n                @mouseout=\"onMouseOut\"\n                :class=\"{ highlighted: isHovered === index }\"\n            >\n              <img :src=\"item.src\" class=\"slide-image\" />\n            </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  </div>\n</template>\n\n<script>\nimport QRCode from \"qrcode\";\n\nlet inputElement = null;\nexport default {\n  data() {\n    return {\n      images: [\n        { src: require(\"@/assets/background.jpg\") },\n        { src: require(\"@/assets/beijing1.png\") },\n        { src: require(\"@/assets/beijing1.png\") },\n        { src: require(\"@/assets/beijing1.png\") },\n        { src: require(\"@/assets/beijing1.png\") },\n      ],\n      url: \"https://space.bilibili.com/452543325/upload/video\", // 这个是输入框的值\n      qrCode: \"\", // 这个是二维码图片的url\n      scrollSpeed: 0.5, // 控制滚动的速度\n      scrollPosition: 0, // 当前滚动位置\n      isHovered: null, // 当前悬停的图片索引\n      clearTimer: null, // 用来存储清除二维码的定时器\n    };\n  },\n  methods: {\n    generateQRCode(event) {\n      // 生成二维码逻辑(参数指定url文字即可)\n      QRCode.toDataURL(this.url)\n          .then(async (qr) => {\n            this.qrCode = qr; // 设置二维码图片\n\n            // 每次生成二维码时，启动一个新的计时器，5秒后清除二维码\n            this.startClearTimer();\n          })\n          .catch((error) => {\n            console.error(\"生成二维码出错：\", error);\n          });\n\n      // 阻止点击二维码按钮时事件传播，防止触发页面上的点击事件\n      event.stopPropagation();\n    },\n\n    // 启动清除二维码的定时器\n    startClearTimer() {\n      // 如果已有定时器，清除它\n      if (this.clearTimer) {\n        clearTimeout(this.clearTimer);\n      }\n\n      // 设置一个 5 秒后清除二维码的定时器\n      this.clearTimer = setTimeout(() => {\n        this.qrCode = \"\"; // 清除二维码\n      }, 10000); // 5秒后清除二维码\n    },\n\n    // 监听页面点击事件，点击时重置定时器\n    handleClick(event) {\n      // 判断点击的区域是否是二维码区域，如果是就不清除二维码，否则清除\n      const qrCodeElement = this.$el.querySelector('.win-erweima');\n\n      // 判断点击是否在二维码外\n      if (qrCodeElement && !qrCodeElement.contains(event.target)) {\n        this.qrCode = \"\"; // 清除二维码\n      }\n\n      // 每次点击时，重置计时器，防止自动清除二维码\n      this.startClearTimer();\n    },\n\n    smoothScroll() {\n      const scrollContainer = this.$refs.scrollContainer;\n      const imageWidth = scrollContainer.children[0].offsetWidth; // 每张图片的宽度\n\n      const animate = () => {\n        if (this.isHovered === null) {\n          this.scrollPosition -= this.scrollSpeed; // 每次更新滚动位置\n\n          // 当第一张图片完全滚出容器时，调整第一张图片到最后\n          if (this.scrollPosition <= -imageWidth) {\n            // 将滚动位置恢复到起始点位置，保持平滑过渡\n            this.scrollPosition += imageWidth;\n\n            // 将第一张图片移到最后，而不影响其他图片\n            const firstImage = this.images.shift(); // 移除第一张图片\n            this.images.push(firstImage); // 将其添加到最后\n\n            // 直接修改 scrollContainer 的 translateX 来维持平滑滚动\n            scrollContainer.style.transition = 'none'; // 禁止过渡动画\n            scrollContainer.style.transform = `translateX(${this.scrollPosition}px)`; // 直接设置新的滚动位置\n\n            // 为了避免“跳跃”，让滚动容器重新触发平滑过渡\n            setTimeout(() => {\n              scrollContainer.style.transition = 'transform 0.2s ease-out'; // 恢复过渡效果\n            }, 0); // 确保修改生效后立刻恢复过渡动画\n          }\n\n          // 更新滚动位置\n          scrollContainer.style.transform = `translateX(${this.scrollPosition}px)`;\n        }\n\n        // 继续请求下一帧，保持滚动\n        requestAnimationFrame(animate);\n      };\n\n      // 启动动画\n      requestAnimationFrame(animate);\n    },\n\n\n    onMouseOver(index) {\n      this.isHovered = index; // 设置当前悬停的图片索引\n    },\n    onMouseOut() {\n      this.isHovered = null; // 重置悬停状态，恢复滚动\n    },\n  },\n  mounted() {\n    this.smoothScroll()\n  },\n};\n</script>\n\n<style scoped>\n.clothing {\n  overflow: hidden;\n  display: flex;\n  flex-direction: column;\n  justify-content: flex-end;\n  align-items: flex-start;\n}\n\n#clothing-v {\n  background: url(\"@/assets/background.jpg\");\n  width: 100%;\n  height: 100%;\n  background-size: 100% 100%;\n}\n\n.win-up {\n  width: 100%;\n  height: 55%;\n  margin-top: 9%;\n  display: flex;\n  justify-content: flex-end;\n  align-items: center;\n}\n\n.win-down {\n  margin-top: 1.5%;\n  margin-left: 1%;\n  width: 76%;\n  height: 25%;\n  margin-bottom: 0.5%;\n  background-color: white;\n  border-radius: 1vw;\n  position: relative;\n}\n\n.win-button {\n  width: 200px;\n  height: 80px;\n  cursor: pointer;\n}\n\n.win-show {\n  width: 80%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: flex-end;\n}\n\n.all-button {\n  width: 20%;\n  height: 80%;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-around;\n  align-items: flex-end;\n}\n\n.win-photo {\n  width: 46.4vw;\n  height: 54.37vh;\n}\n\n.win-erweima {\n  position: absolute;\n  top: 50vh;\n  left: 50%;\n  width: 500px;\n  height: 500px;\n  transform: translate(-50%, -50%);\n  z-index: 9999;\n}\n\n.overlay {\n  position: absolute;\n  width: 100vw;\n  height: 100vh;\n  background-color: rgba(0, 0, 0, 0.5);\n  z-index: 10;\n}\n\n.gundong {\n  width: 100%;\n  height: 100%;\n  margin: 0 auto;\n  display: flex;\n  flex-direction: column;\n}\n\n.topgun {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  overflow: hidden;\n}\n\n.scroll-container {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  transition: transform 0.2s ease-out;\n}\n\n.smallbox {\n  margin-left: 1vh;\n  width: 24.15%;\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex: 0 0 auto;\n}\n\nimg.slide-image {\n  border: 0.2vw solid transparent;\n  width: 100%;\n  height: 80%;\n}\n\n.highlighted img {\n  border: 0.2vw solid #ff6f00;\n  cursor: pointer;\n  transform: scale(1.02); /* 放大图片 */\n}\n.control-img {\n  height: 5%;\n  width: 1%;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  margin: auto;\n  z-index: 100;\n}\n.control-img:hover{\n  cursor: pointer;\n}\n.pre-img {\n  left: 0;\n}\n\n.nex-img {\n  right: 0;\n}\n</style>\n"],"mappings":";AAoDA,OAAAA,MAAA;AAEA,IAAAC,YAAA;AACA;EACAC,KAAA;IACA;MACAC,MAAA,GACA;QAAAC,GAAA,EAAAC,OAAA;MAAA,GACA;QAAAD,GAAA,EAAAC,OAAA;MAAA,GACA;QAAAD,GAAA,EAAAC,OAAA;MAAA,GACA;QAAAD,GAAA,EAAAC,OAAA;MAAA,GACA;QAAAD,GAAA,EAAAC,OAAA;MAAA,EACA;MACAC,GAAA;MAAA;MACAC,MAAA;MAAA;MACAC,WAAA;MAAA;MACAC,cAAA;MAAA;MACAC,SAAA;MAAA;MACAC,UAAA;IACA;EACA;EACAC,OAAA;IACAC,eAAAC,KAAA;MACA;MACAd,MAAA,CAAAe,SAAA,MAAAT,GAAA,EACAU,IAAA,OAAAC,EAAA;QACA,KAAAV,MAAA,GAAAU,EAAA;;QAEA;QACA,KAAAC,eAAA;MACA,GACAC,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAD,KAAA,aAAAA,KAAA;MACA;;MAEA;MACAN,KAAA,CAAAQ,eAAA;IACA;IAEA;IACAJ,gBAAA;MACA;MACA,SAAAP,UAAA;QACAY,YAAA,MAAAZ,UAAA;MACA;;MAEA;MACA,KAAAA,UAAA,GAAAa,UAAA;QACA,KAAAjB,MAAA;MACA;IACA;IAEA;IACAkB,YAAAX,KAAA;MACA;MACA,MAAAY,aAAA,QAAAC,GAAA,CAAAC,aAAA;;MAEA;MACA,IAAAF,aAAA,KAAAA,aAAA,CAAAG,QAAA,CAAAf,KAAA,CAAAgB,MAAA;QACA,KAAAvB,MAAA;MACA;;MAEA;MACA,KAAAW,eAAA;IACA;IAEAa,aAAA;MACA,MAAAC,eAAA,QAAAC,KAAA,CAAAD,eAAA;MACA,MAAAE,UAAA,GAAAF,eAAA,CAAAG,QAAA,IAAAC,WAAA;;MAEA,MAAAC,OAAA,GAAAA,CAAA;QACA,SAAA3B,SAAA;UACA,KAAAD,cAAA,SAAAD,WAAA;;UAEA;UACA,SAAAC,cAAA,KAAAyB,UAAA;YACA;YACA,KAAAzB,cAAA,IAAAyB,UAAA;;YAEA;YACA,MAAAI,UAAA,QAAAnC,MAAA,CAAAoC,KAAA;YACA,KAAApC,MAAA,CAAAqC,IAAA,CAAAF,UAAA;;YAEA;YACAN,eAAA,CAAAS,KAAA,CAAAC,UAAA;YACAV,eAAA,CAAAS,KAAA,CAAAE,SAAA,sBAAAlC,cAAA;;YAEA;YACAe,UAAA;cACAQ,eAAA,CAAAS,KAAA,CAAAC,UAAA;YACA;UACA;;UAEA;UACAV,eAAA,CAAAS,KAAA,CAAAE,SAAA,sBAAAlC,cAAA;QACA;;QAEA;QACAmC,qBAAA,CAAAP,OAAA;MACA;;MAEA;MACAO,qBAAA,CAAAP,OAAA;IACA;IAGAQ,YAAAC,KAAA;MACA,KAAApC,SAAA,GAAAoC,KAAA;IACA;IACAC,WAAA;MACA,KAAArC,SAAA;IACA;EACA;EACAsC,QAAA;IACA,KAAAjB,YAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}