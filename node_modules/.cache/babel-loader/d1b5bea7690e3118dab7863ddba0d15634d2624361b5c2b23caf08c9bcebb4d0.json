{"ast":null,"code":"import \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nexport default {\n  data() {\n    return {\n      videoWidth: 500,\n      videoHeight: 300,\n      number: 0,\n      hours: 0,\n      minutes: 0,\n      seconds: 0,\n      run: false,\n      imgSrc: '',\n      flag: true,\n      thisCancas: null,\n      thisContext: null,\n      thisVideo: null,\n      userInfo: {\n        imgStr: \"\"\n      },\n      videoState: true\n    };\n  },\n  methods: {\n    getCompetence() {\n      this.videoState = false;\n      var _this = this;\n      this.thisCancas = document.getElementById('canvasCamera');\n      this.thisContext = this.thisCancas.getContext('2d');\n      this.thisVideo = document.getElementById('videoCamera');\n\n      // 旧版本浏览器可能根本不支持mediaDevices，我们首先设置一个空对象\n      if (navigator.mediaDevices === undefined) {\n        navigator.mediaDevices = {};\n      }\n      // 一些浏览器实现了部分mediaDevices，我们不能只分配一个对象\n      // 使用getUserMedia，因为它会覆盖现有的属性。\n      // 这里，如果缺少getUserMedia属性，就添加它。\n      if (navigator.mediaDevices.getUserMedia === undefined) {\n        navigator.mediaDevices.getUserMedia = function (constraints) {\n          // 首先获取现存的getUserMedia(如果存在)\n          var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.getUserMedia;\n          // 有些浏览器不支持，会返回错误信息\n          // 保持接口一致\n          console.log('viedo', getUserMedia);\n          if (!getUserMedia) {\n            return Promise.reject(new Error('getUserMedia is not implemented in this browser'));\n          }\n          // 否则，使用Promise将调用包装到旧的navigator.getUserMedia\n          return new Promise(function (resolve, reject) {\n            getUserMedia.call(navigator, constraints, resolve, reject);\n          });\n        };\n      }\n      //使用此方式获取本地音频视频输入输出设备，找到要使用的设备id，方式见下图\n      var enumeratorPromise = navigator.mediaDevices.enumerateDevices();\n      console.log(enumeratorPromise);\n      //把上面获取到的设备deviceId填入下面video的deviceId中，就可以选择要调用的摄像头了\n      var constraints = {\n        audio: false,\n        video: {\n          deviceId: 'becf7e45fe56e42bcb4ec3f78b1b6b0fcffd6c6ccd890d30fffc2430a92c99bb',\n          width: this.videoWidth,\n          height: this.videoHeight\n        }\n      };\n      navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\n        // 旧的浏览器可能没有srcObject\n        if ('srcObject' in _this.thisVideo) {\n          _this.thisVideo.srcObject = stream;\n        } else {\n          // 避免在新的浏览器中使用它，因为它正在被弃用。\n          _this.thisVideo.src = window.URL.createObjectURL(stream);\n        }\n        _this.thisVideo.onloadedmetadata = function (e) {\n          if (_this.flag == true) {\n            _this.thisVideo.play();\n            _this.flag = false;\n          } else {\n            _this.thisVideo.pause();\n            _this.flag = true;\n          }\n        };\n      }).catch(err => {\n        console.log(err);\n      });\n    },\n    stopNavigator() {\n      this.videoState = true;\n      this.thisVideo.srcObject.getTracks()[0].stop();\n    },\n    setImage() {\n      var _this = this;\n      _this.imgSrc = '';\n      // 点击，canvas画图\n      _this.thisContext.drawImage(_this.thisVideo, 0, 0, _this.videoWidth, _this.videoHeight);\n      // 获取图片base64链接\n      _this.imgSrc = this.thisCancas.toDataURL('image/png'); //_this.imgSrc为解码得到的base64编码格式的图片\n      console.log('picture', _this.imgSrc);\n      // this.$emit('setImgSrc', _this.imgSrc)\n      console.log('转换', this.dataURLtoFile(_this.imgSrc, 'file'));\n    },\n    clearImgSrc() {\n      this.imgSrc = '';\n    }\n  }\n};","map":{"version":3,"names":["data","videoWidth","videoHeight","number","hours","minutes","seconds","run","imgSrc","flag","thisCancas","thisContext","thisVideo","userInfo","imgStr","videoState","methods","getCompetence","_this","document","getElementById","getContext","navigator","mediaDevices","undefined","getUserMedia","constraints","webkitGetUserMedia","mozGetUserMedia","console","log","Promise","reject","Error","resolve","call","enumeratorPromise","enumerateDevices","audio","video","deviceId","width","height","then","stream","srcObject","src","window","URL","createObjectURL","onloadedmetadata","e","play","pause","catch","err","stopNavigator","getTracks","stop","setImage","drawImage","toDataURL","dataURLtoFile","clearImgSrc"],"sources":["src/views/lunbotu.vue"],"sourcesContent":["<template>\r\n  <div class=\"slider\">\r\n    <div>\r\n      <img :src=\"'data:image/jpeg;base64' + imgSrc\" alt=\"\" class=\"img1\">\r\n    </div>\r\n    <img\r\n            class=\"win-button\"\r\n            src=\"@/assets/shangchuan.png\"\r\n            @click=\"getCompetence\"\r\n        >\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data () {\r\n      return {\r\n        videoWidth: 500,\r\n        videoHeight: 300,\r\n        number:0,\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        run:false,\r\n        imgSrc: '',\r\n        flag:true,\r\n        thisCancas: null,\r\n        thisContext: null,\r\n        thisVideo: null,\r\n        userInfo: {\r\n          imgStr:\"\"\r\n        },\r\n        videoState: true\r\n      }\r\n    },\r\n    methods:{\r\n       getCompetence () {\r\n        this.videoState = false\r\n        var _this = this\r\n        this.thisCancas = document.getElementById('canvasCamera')\r\n        this.thisContext = this.thisCancas.getContext('2d')\r\n        this.thisVideo = document.getElementById('videoCamera')\r\n\r\n        // 旧版本浏览器可能根本不支持mediaDevices，我们首先设置一个空对象\r\n        if (navigator.mediaDevices === undefined) {\r\n          navigator.mediaDevices = {}\r\n        }\r\n        // 一些浏览器实现了部分mediaDevices，我们不能只分配一个对象\r\n        // 使用getUserMedia，因为它会覆盖现有的属性。\r\n        // 这里，如果缺少getUserMedia属性，就添加它。\r\n        if (navigator.mediaDevices.getUserMedia === undefined) {\r\n          navigator.mediaDevices.getUserMedia = function (constraints) {\r\n            // 首先获取现存的getUserMedia(如果存在)\r\n            var getUserMedia = navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.getUserMedia\r\n            // 有些浏览器不支持，会返回错误信息\r\n            // 保持接口一致\r\n            console.log('viedo',getUserMedia);\r\n            if (!getUserMedia) {\r\n              return Promise.reject(new Error('getUserMedia is not implemented in this browser'))\r\n            }\r\n            // 否则，使用Promise将调用包装到旧的navigator.getUserMedia\r\n            return new Promise(function (resolve, reject) {\r\n              getUserMedia.call(navigator, constraints, resolve, reject)\r\n            })\r\n          }\r\n        }\r\n        //使用此方式获取本地音频视频输入输出设备，找到要使用的设备id，方式见下图\r\n        var enumeratorPromise = navigator.mediaDevices.enumerateDevices()\r\n        console.log(enumeratorPromise)\r\n        //把上面获取到的设备deviceId填入下面video的deviceId中，就可以选择要调用的摄像头了\r\n        var constraints = { audio: false, video: { deviceId: 'becf7e45fe56e42bcb4ec3f78b1b6b0fcffd6c6ccd890d30fffc2430a92c99bb', width: this.videoWidth, height: this.videoHeight } }\r\n        navigator.mediaDevices.getUserMedia(constraints).then(function (stream) {\r\n          // 旧的浏览器可能没有srcObject\r\n          if ('srcObject' in _this.thisVideo) {\r\n            _this.thisVideo.srcObject = stream\r\n          } else {\r\n            // 避免在新的浏览器中使用它，因为它正在被弃用。\r\n            _this.thisVideo.src = window.URL.createObjectURL(stream)\r\n          }\r\n          _this.thisVideo.onloadedmetadata = function (e) {\r\n\r\n            if (_this.flag==true){\r\n              _this.thisVideo.play();\r\n              _this.flag=false;\r\n            }\r\n            else {\r\n              _this.thisVideo.pause()\r\n              _this.flag=true;\r\n            }\r\n\r\n          }\r\n        }).catch(err => {\r\n          console.log(err)\r\n        })\r\n      },\r\n      stopNavigator () {\r\n        this.videoState = true\r\n        this.thisVideo.srcObject.getTracks()[0].stop()\r\n      },\r\n      setImage () {\r\n        var _this = this\r\n        _this.imgSrc='';\r\n        // 点击，canvas画图\r\n        _this.thisContext.drawImage(_this.thisVideo, 0, 0, _this.videoWidth, _this.videoHeight)\r\n        // 获取图片base64链接\r\n        _this.imgSrc = this.thisCancas.toDataURL('image/png')//_this.imgSrc为解码得到的base64编码格式的图片\r\n        console.log('picture',_this.imgSrc)\r\n        // this.$emit('setImgSrc', _this.imgSrc)\r\n       console.log('转换',this.dataURLtoFile(_this.imgSrc, 'file'))\r\n      },\r\n      clearImgSrc () {\r\n        this.imgSrc = ''\r\n      },\r\n\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n\r\n<style>\r\n.win-button {\r\n  width: 13.09vw;\r\n  height: 9.3vh;\r\n  cursor: pointer;\r\n}\r\n\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}